import 'dotenv/config'
import { createBot, createProvider, createFlow, addKeyword } from '@builderbot/bot'
import { PostgreSQLAdapter as Database } from '@builderbot/database-postgres'
import { BaileysProvider as Provider } from '@builderbot/provider-baileys'
import OpenAI from 'openai'
import axios from 'axios'
import { getIntention, buildConversationHistory, IntentionResult } from './ai/catch-intention'

// --- Configuraci√≥n ---
const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
});

const PORT = process.env.PORT ?? 3008
const EXTERNAL_API_URL = process.env.EXTERNAL_API_URL ?? 'http://localhost:8000'

interface UserState {
    step: string;
    name?: string;
    salary?: string;
    company?: string;
    selectedProduct?: string;
    amount?: string;
    additionalInfo?: string;
    conversationHistory?: string[];
    retryCount?: number;
    clientData?: any;
    campaignData?: any;
}

const userStates = new Map<string, UserState>()

/**
 * Consultar informaci√≥n del cliente desde API externa
 */
const getClientInfo = async (phoneNumber: string): Promise<any> => {
    try {
        console.log(`üîç Consultando informaci√≥n del cliente: ${phoneNumber}`)
        
        const cleanPhone = phoneNumber.replace(/[^\d+]/g, '')
        const response = await axios.get(`${EXTERNAL_API_URL}/client/${cleanPhone}`, {
            timeout: 10000,
            headers: {
                'Content-Type': 'application/json'
            }
        })
        
        console.log(`‚úÖ Informaci√≥n del cliente obtenida:`, response.data)
        return response.data
        
    } catch (error: any) {
        console.log(`‚ùå Error consultando cliente: ${error.message}`)
        return null
    }
}

/**
 * Consultar campa√±as activas para el cliente
 */
const getCampaignInfo = async (phoneNumber: string): Promise<any> => {
    try {
        console.log(`üéØ Consultando campa√±as para: ${phoneNumber}`)
        
        const cleanPhone = phoneNumber.replace(/[^\d+]/g, '')
        const response = await axios.get(`${EXTERNAL_API_URL}/campanas/${cleanPhone}`, {
            timeout: 10000,
            headers: {
                'Content-Type': 'application/json'
            }
        })
        
        console.log(`‚úÖ Campa√±as obtenidas:`, response.data)
        return response.data
        
    } catch (error: any) {
        console.log(`‚ùå Error consultando campa√±as: ${error.message}`)
        return null
    }
}

/**
 * Enviar lead aceptado a API externa
 */
const sendLeadAccepted = async (phoneNumber: string, leadData: any): Promise<boolean> => {
    try {
        console.log(`üì§ Enviando lead aceptado: ${phoneNumber}`)
        
        const cleanPhone = phoneNumber.replace(/[^\d+]/g, '')
        const response = await axios.post(`${EXTERNAL_API_URL}/lead/${cleanPhone}`, leadData, {
            timeout: 15000,
            headers: {
                'Content-Type': 'application/json'
            }
        })
        
        console.log(`‚úÖ Lead enviado exitosamente:`, response.data)
        return true
        
    } catch (error: any) {
        console.log(`‚ùå Error enviando lead: ${error.message}`)
        return false
    }
}

/**
 * Sistema de saludos variados basado en contexto real del cliente
 */
const generateVariedGreeting = (clientData: any, campaignData: any, userName: string): string => {
    const hasActiveCampaigns = campaignData && campaignData.active_campaigns && campaignData.active_campaigns.length > 0
    const campaign = hasActiveCampaigns ? campaignData.active_campaigns[0] : null
    const productType = campaign?.product || 'general'
    const maxAmount = campaign?.max_amount || 0
    const customerSegment = clientData?.customer_segment || 'standard'
    const creditScore = clientData?.score || 0
    const monthlyIncome = clientData?.monthly_income || 0
    
    const greetingTemplates = {
        'credit_card': [
            `¬°Hola ${userName}! üéØ Soy tu asesor de Banco Guayaquil. Vi que has consultado sobre tarjetas de cr√©dito y quiero ofrecerte algo especial. ¬øConversamos?`,
            `${userName}, ¬°qu√© tal! üëã Te escribo porque detect√© tu inter√©s en tarjetas de cr√©dito. Tengo una propuesta personalizada para ti. ¬øTe interesa?`,
            `¬°Buenas ${userName}! üí≥ Desde Banco Guayaquil te contacto porque vi tu actividad sobre tarjetas. Tengo condiciones exclusivas que podr√≠an gustarte. ¬øHablamos?`,
            `Hola ${userName} üòä Tu asesor de Banco Guayaquil aqu√≠. Not√© que buscas una tarjeta de cr√©dito y puedo ayudarte con algo mejor de lo que imaginabas. ¬øTe parece si vemos opciones?`
        ],
        'credito_personal': [
            `¬°Hola ${userName}! üí∞ Soy de Banco Guayaquil y vi que necesitas un cr√©dito personal. Tengo opciones que podr√≠an encajar perfecto con tu perfil. ¬øTe cuento?`,
            `${userName}, ¬°buenas! üöÄ Te contacto porque detectamos tu inter√©s en financiamiento personal. Hay algo interesante que ofrecerte. ¬øConversamos?`,
            `¬°Qu√© tal ${userName}! üëã Desde Banco Guayaquil te escribo por tu consulta sobre cr√©ditos. Creo que puedo sorprenderte con las condiciones. ¬øTe interesa escuchar?`,
            `Hola ${userName} üòä Tu asesor bancario aqu√≠. Vi tu b√∫squeda de cr√©dito personal y tengo propuestas que van a gustarte. ¬øDedicamos unos minutos?`
        ],
        'credito_vehicular': [
            `¬°Hola ${userName}! üöó Te contacto de Banco Guayaquil porque vi tu inter√©s en financiar un veh√≠culo. Tengo tasas especiales que deber√≠as conocer. ¬øHablamos?`,
            `${userName}, ¬°buenas! üéØ Soy tu asesor de Banco Guayaquil. Detect√© que buscas cr√©dito vehicular y puedo ofrecerte condiciones preferenciales. ¬øTe interesa?`,
            `¬°Qu√© tal ${userName}! üöÄ Desde el banco te escribo por tu consulta sobre financiamiento de autos. Hay algo bueno que mostrarte. ¬øConversamos?`,
            `Hola ${userName} üëã Tu asesor bancario aqu√≠. Vi que planeas comprar un veh√≠culo y tengo propuestas que podr√≠an facilitarte todo. ¬øTe cuento?`
        ],
        'credito_hipotecario': [
            `¬°Hola ${userName}! üè† Te contacto de Banco Guayaquil por tu inter√©s en cr√©dito hipotecario. Tengo condiciones especiales para tu casa so√±ada. ¬øConversamos?`,
            `${userName}, ¬°buenas! üéØ Soy de Banco Guayaquil y vi tu b√∫squeda de cr√©dito para vivienda. Puedo ofrecerte algo muy competitivo. ¬øTe interesa?`,
            `¬°Qu√© tal ${userName}! üöÄ Desde el banco te escribo porque detect√© tu proyecto inmobiliario. Hay financiamiento que te va a convenir. ¬øHablamos?`,
            `Hola ${userName} üòä Tu asesor hipotecario aqu√≠. Vi tu inter√©s en financiar vivienda y tengo propuestas que podr√≠an sorprenderte. ¬øTe cuento?`
        ],
        'general': [
            `¬°Hola ${userName}! üëã Soy tu asesor de Banco Guayaquil. Vi tu actividad y quiero ofrecerte productos que se ajusten a tu perfil. ¬øConversamos?`,
            `${userName}, ¬°buenas! üéØ Te contacto porque detectamos tu inter√©s en nuestros servicios financieros. Tengo algo personalizado para ti. ¬øTe interesa?`,
            `¬°Qu√© tal ${userName}! üí´ Desde Banco Guayaquil te escribo para ofrecerte opciones que podr√≠an interesarte seg√∫n tu perfil. ¬øHablamos?`,
            `Hola ${userName} üòä Tu asesor bancario aqu√≠. Quiero mostrarte productos financieros que van perfectos con lo que buscas. ¬øTe parece si conversamos?`
        ]
    }
    
    const templates = greetingTemplates[productType] || greetingTemplates['general']
    
    let templateIndex = 0
    
    if (customerSegment === 'premium' && creditScore > 750) {
        templateIndex = 0
    } else if (monthlyIncome > 2000) {
        templateIndex = 1
    } else if (creditScore > 600) {
        templateIndex = 2
    } else {
        templateIndex = 3
    }
    
    templateIndex = templateIndex % templates.length
    
    let greeting = templates[templateIndex]
    
    if (hasActiveCampaigns && maxAmount > 0) {
        const amountText = maxAmount >= 10000 ? 
            `hasta $${Math.floor(maxAmount/1000)}k` : 
            `hasta $${maxAmount.toLocaleString()}`
        
        if (productType === 'credit_card') {
            greeting += ` L√≠mites ${amountText} disponibles.`
        } else if (productType.includes('credito')) {
            greeting += ` Montos ${amountText} con excelentes tasas.`
        }
    }
    
    return greeting
}

/**
 * Sistema de saludos por hora del d√≠a
 */
const generateTimeBasedGreeting = (clientData: any, campaignData: any, userName: string): string => {
    const hour = new Date().getHours()
    const campaign = campaignData?.active_campaigns?.[0]
    const productType = campaign?.product || 'general'
    
    let timeGreeting = ''
    if (hour < 12) {
        timeGreeting = 'Buenos d√≠as'
    } else if (hour < 18) {
        timeGreeting = 'Buenas tardes'
    } else {
        timeGreeting = 'Buenas noches'
    }
    
    const contextualMessages = {
        'credit_card': `${timeGreeting} ${userName} üí≥ Te contacto de Banco Guayaquil porque vi tu inter√©s en tarjetas de cr√©dito. ¬øTe parece si revisamos las mejores opciones para ti?`,
        'credito_personal': `${timeGreeting} ${userName} üí∞ Soy tu asesor de Banco Guayaquil. Detect√© que buscas un cr√©dito personal y tengo propuestas interesantes. ¬øConversamos?`,
        'credito_vehicular': `${timeGreeting} ${userName} üöó Te escribo de Banco Guayaquil por tu consulta sobre cr√©dito vehicular. Hay condiciones que podr√≠an gustarte. ¬øHablamos?`,
        'credito_hipotecario': `${timeGreeting} ${userName} üè† Desde Banco Guayaquil te contacto por tu inter√©s hipotecario. Tengo financiamiento especial para tu proyecto. ¬øTe cuento?`,
        'general': `${timeGreeting} ${userName} üëã Soy de Banco Guayaquil y quiero ofrecerte productos financieros que se ajusten a tu perfil. ¬øTe interesa conversar?`
    }
    
    return contextualMessages[productType] || contextualMessages['general']
}

/**
 * Selector principal de saludo
 */
const generatePersonalizedGreeting = (clientData: any, campaignData: any, userName: string): string => {
    const greetingStyles = [
        () => generateVariedGreeting(clientData, campaignData, userName)
    ]
    
    const styleIndex = Math.floor(Date.now() / 1000) % greetingStyles.length
    
    return greetingStyles[styleIndex]()
}

/**
 * Validaci√≥n inteligente con IA
 */
const validateDataWithAI = async (data: string, dataType: 'salary' | 'company' | 'amount', userName: string): Promise<{isValid: boolean, message?: string, extractedValue?: string}> => {
    try {
        let prompt = ''
        
        if (dataType === 'salary') {
            prompt = `
            El cliente ${userName} dice que su sueldo es: "${data}"
            
            VALIDA si esto es un sueldo v√°lido:
            - Debe ser un n√∫mero positivo
            - Puede incluir palabras como "d√≥lares", "mil", "k"  
            - Ejemplo v√°lido: "2500", "2,500", "2500 d√≥lares", "2.5k", "dos mil quinientos"
            - Ejemplo inv√°lido: "no tengo", "mucho", "poco", "-500", "0", n√∫meros negativos
            
            Si es v√°lido, extrae SOLO el n√∫mero en formato limpio.
            Si no es v√°lido, explica por qu√© de forma amigable y humana.
            
            Responde en formato JSON:
            {"isValid": true/false, "extractedValue": "n√∫mero_limpio", "message": "explicaci√≥n_humana"}
            `
        } else if (dataType === 'company') {
            prompt = `
            El cliente ${userName} dice que trabaja en: "${data}"
            
            VALIDA si esto es una empresa/trabajo v√°lido:
            - Debe ser un nombre de empresa, instituci√≥n o tipo de trabajo
            - Ejemplo v√°lido: "Banco Guayaquil", "Google", "soy independiente", "trabajo por mi cuenta"
            - Ejemplo inv√°lido: "no trabajo", "desempleado", "nada", respuestas vagas
            
            Si es v√°lido, limpia el texto.
            Si no es v√°lido, pregunta de forma emp√°tica.
            
            Responde en formato JSON:
            {"isValid": true/false, "extractedValue": "empresa_limpia", "message": "explicaci√≥n_humana"}
            `
        } else if (dataType === 'amount') {
            prompt = `
            El cliente ${userName} solicita un monto de: "${data}"
            
            VALIDA si esto es un monto v√°lido:
            - Debe ser un n√∫mero positivo mayor a $1,000
            - Puede incluir palabras como "d√≥lares", "mil", "k"
            - Ejemplo v√°lido: "15000", "15,000", "15k", "quince mil"
            - Ejemplo inv√°lido: "mucho", "poco", "no s√©", "100" (muy bajo), "-5000"
            
            Si es v√°lido, extrae el n√∫mero limpio.
            Si no es v√°lido, sugiere rangos t√≠picos de forma amigable.
            
            Responde en formato JSON:
            {"isValid": true/false, "extractedValue": "n√∫mero_limpio", "message": "explicaci√≥n_humana"}
            `
        }

        const completion = await openai.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [
                {
                    role: "system",
                    content: "Eres un asesor bancario humano y emp√°tico. IMPORTANTE: Responde √öNICAMENTE con JSON v√°lido puro, sin ```json ni markdown. Solo el objeto JSON limpio."
                },
                {
                    role: "user",
                    content: prompt
                }
            ],
            temperature: 0.3,
        });

        let response = completion.choices[0].message.content || '{"isValid": false, "message": "No pude procesar tu respuesta"}'
        
        response = response.replace(/```json\s*/g, '').replace(/```\s*/g, '').trim()
        
        const parsed = JSON.parse(response)
        
        return {
            isValid: parsed.isValid,
            message: parsed.message,
            extractedValue: parsed.extractedValue
        }
        
    } catch (error) {
        console.error('Error en validaci√≥n:', error)
        return {
            isValid: false,
            message: "Disculpa, no entend√≠ bien tu respuesta. ¬øPodr√≠as repetirla de forma m√°s clara?"
        }
    }
}

/**
 * Respuesta humana y emp√°tica
 */
const generateHumanResponse = async (situation: string, userName: string, userMessage: string): Promise<string> => {
    try {
        const prompt = `
        El cliente ${userName} est√° en esta situaci√≥n: ${situation}
        Su mensaje fue: "${userMessage}"
        
        Genera una respuesta MUY humana y emp√°tica como si fueras un asesor real del banco que:
        1. Entiende su situaci√≥n particular
        2. Le da confianza y tranquilidad
        3. Le ofrece alternativas o soluciones
        4. Mantiene un tono c√°lido pero profesional
        
        M√°ximo 80 palabras. Que suene natural y humano.
        `

        const completion = await openai.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [
                {
                    role: "system",
                    content: "Eres un asesor bancario con 15 a√±os de experiencia. Respondes con mucha humanidad y empat√≠a."
                },
                {
                    role: "user",
                    content: prompt
                }
            ],
            temperature: 0.7,
        });

        return completion.choices[0].message.content || "Entiendo tu situaci√≥n. Estoy aqu√≠ para ayudarte de la mejor manera posible."
        
    } catch (error) {
        return "Comprendo perfectamente. Cada situaci√≥n es √∫nica y estoy aqu√≠ para encontrar la mejor soluci√≥n para ti."
    }
}

// --- Flujos del Bot ---

const mainFlow = addKeyword<Provider, Database>('')
    .addAction(async (ctx, { flowDynamic, gotoFlow }) => {
        const userId = ctx.from
        
        if (!userStates.has(userId)) {
            const userName = ctx.pushName || 'estimado cliente'
            
            const clientData = await getClientInfo(userId)
            const campaignData = await getCampaignInfo(userId)
            
            if (!clientData) {
                await flowDynamic('‚ùå No encontr√© tu informaci√≥n en nuestro sistema. ¬øPodr√≠as confirmar si eres cliente de Banco Guayaquil?')
                return
            }
            
            if (!campaignData || !campaignData.active_campaigns || campaignData.active_campaigns.length === 0) {
                await flowDynamic('‚ÑπÔ∏è No tienes campa√±as activas en este momento, pero igual puedo ayudarte con informaci√≥n general sobre nuestros productos. üòä')
            }
            
            userStates.set(userId, { 
                step: 'greeting', 
                name: userName,
                clientData,
                campaignData,
                conversationHistory: [],
                retryCount: 0
            })
            
            const greetingMessage = generatePersonalizedGreeting(clientData, campaignData, userName)
            await flowDynamic(greetingMessage)
            
            userStates.set(userId, { 
                step: 'waiting_interest', 
                name: userName,
                clientData,
                campaignData,
                conversationHistory: [greetingMessage],
                retryCount: 0
            })
            return
        }
        
        return gotoFlow(conversationFlow)
    })

const conversationFlow = addKeyword<Provider, Database>('')
    .addAction(async (ctx, { flowDynamic }) => {
        const userId = ctx.from
        const userMessage = ctx.body
        const userState = userStates.get(userId) || { step: 'greeting', name: 'Usuario', retryCount: 0 }
        
        const updatedHistory = [...(userState.conversationHistory || []), `Usuario: ${userMessage}`]
        userStates.set(userId, { ...userState, conversationHistory: updatedHistory })
        
        const conversationHistoryText = buildConversationHistory(userStates, userId)
        const intention: IntentionResult = await getIntention(userMessage, conversationHistoryText)
        
        console.log(`üß† Intenci√≥n detectada: ${intention.intention} (${intention.confidence}) - Emoci√≥n: ${intention.emotion}`)
        
        if (intention.emotion === 'negative' || intention.emotion === 'frustrated') {
            const empathicResponse = await generateHumanResponse('cliente molesto o frustrado', userState.name!, userMessage)
            await flowDynamic(empathicResponse)
            await flowDynamic('¬øHay algo espec√≠fico que te preocupa? Estoy aqu√≠ para escucharte y ayudarte. üòä')
            return
        }
        
        switch (userState.step) {
            case 'waiting_interest': {
                if (intention.intention === 'interest_confirm' || userMessage.toLowerCase().includes('si') || userMessage.toLowerCase().includes('s√≠')) {
                    await flowDynamic('¬°Excelente! Me da mucha satisfacci√≥n poder ayudarte con esto.')
                    await flowDynamic('Para ofrecerte las mejores condiciones, necesito conocer tu situaci√≥n financiera actual.')
                    await flowDynamic('¬øPodr√≠as decirme cu√°l es tu sueldo mensual? Puedes escribirlo como prefieras: n√∫meros, con palabras, etc. üí∞')
                    userStates.set(userId, { ...userState, step: 'waiting_salary', retryCount: 0 })
                } else if (intention.intention === 'interest_decline' || userMessage.toLowerCase().includes('no')) {
                    const humanResponse = await generateHumanResponse('cliente declina ayuda', userState.name!, userMessage)
                    await flowDynamic(humanResponse)
                    await flowDynamic('¬øHay alguna informaci√≥n espec√≠fica que te gustar√≠a conocer? Estoy aqu√≠ para cualquier duda. ü§î')
                    userStates.set(userId, { ...userState, step: 'waiting_questions' })
                } else {
                    await flowDynamic('Entiendo que puedas tener dudas. Es completamente normal.')
                    await flowDynamic('¬øTe gustar√≠a que te cuente m√°s sobre nuestras opciones, o prefieres que te ayude directamente con una solicitud? üòä')
                }
                break
            }

            case 'waiting_salary': {
                const validation = await validateDataWithAI(userMessage, 'salary', userState.name!)
                
                if (validation.isValid && validation.extractedValue) {
                    const salary = validation.extractedValue
                    await flowDynamic(`¬°Perfecto! Ingreso de $${salary} mensuales registrado. ‚úÖ`)
                    await flowDynamic('Excelente situaci√≥n financiera. Ahora, ¬øpodr√≠as decirme en qu√© empresa trabajas o a qu√© te dedicas? üè¢')
                    userStates.set(userId, { ...userState, step: 'waiting_company', salary, retryCount: 0 })
                } else {
                    const retryCount = (userState.retryCount || 0) + 1
                    
                    if (retryCount >= 3) {
                        const humanResponse = await generateHumanResponse('cliente con dificultades para proporcionar sueldo', userState.name!, userMessage)
                        await flowDynamic(humanResponse)
                        await flowDynamic('¬øTe gustar√≠a que un asesor especializado te llame para conversar sobre tu situaci√≥n espec√≠fica? üìû')
                        userStates.set(userId, { ...userState, step: 'waiting_human_contact' })
                    } else {
                        await flowDynamic(validation.message || 'No logr√© entender tu sueldo.')
                        if (retryCount === 1) {
                            await flowDynamic('Por ejemplo, puedes escribir: "2500", "2,500 d√≥lares", "dos mil quinientos", etc.')
                        }
                        userStates.set(userId, { ...userState, retryCount })
                    }
                }
                break
            }
                
            case 'waiting_company': {
                const validation = await validateDataWithAI(userMessage, 'company', userState.name!)
                
                if (validation.isValid && validation.extractedValue) {
                    const company = validation.extractedValue
                    await flowDynamic(`¬°Excelente! ${company} es una muy buena referencia. ‚úÖ`)
                    await flowDynamic('Con tu perfil laboral, podemos ofrecerte condiciones muy atractivas.')
                    await flowDynamic('¬øQu√© monto de cr√©dito personal necesitas para tu proyecto? üí∞')
                    userStates.set(userId, { ...userState, step: 'waiting_amount', company, retryCount: 0 })
                } else {
                    const retryCount = (userState.retryCount || 0) + 1
                    
                    if (retryCount >= 3) {
                        const humanResponse = await generateHumanResponse('dificultades con informaci√≥n laboral', userState.name!, userMessage)
                        await flowDynamic(humanResponse)
                        await flowDynamic('Entiendo que cada situaci√≥n laboral es √∫nica. ¬øTe gustar√≠a que conversemos por tel√©fono? üìû')
                        userStates.set(userId, { ...userState, step: 'waiting_human_contact' })
                    } else {
                        await flowDynamic(validation.message || 'No logr√© entender d√≥nde trabajas.')
                        if (retryCount === 1) {
                            await flowDynamic('Puedes escribir el nombre de tu empresa, "independiente", "por cuenta propia", etc.')
                        }
                        userStates.set(userId, { ...userState, retryCount })
                    }
                }
                break
            }
                
            case 'waiting_amount': {
                const validation = await validateDataWithAI(userMessage, 'amount', userState.name!)
                
                if (validation.isValid && validation.extractedValue) {
                    const amount = validation.extractedValue
                    await flowDynamic(`¬°Perfecto! Solicitud de ${amount} recibida. ‚úÖ`)
                    
                    await flowDynamic('üìã Resumen de tu solicitud:')
                    await flowDynamic(`‚Ä¢ *Nombre:* ${userState.name}\n‚Ä¢ *Sueldo:* ${userState.salary}\n‚Ä¢ *Empresa:* ${userState.company}\n‚Ä¢ *Monto:* ${amount}`)

                    await flowDynamic('üì§ Enviando tu solicitud a nuestro sistema...')
                    
                    const leadData = {
                        name: userState.name,
                        salary: userState.salary,
                        company: userState.company,
                        amount: amount,
                        product: userState.selectedProduct || 'credito_personal',
                        timestamp: new Date().toISOString(),
                        source: 'whatsapp_bot',
                        client_data: userState.clientData,
                        campaign_data: userState.campaignData
                    }
                    
                    const leadSent = await sendLeadAccepted(userId, leadData)
                    
                    if (leadSent) {
                        await flowDynamic('‚úÖ Tu solicitud ha sido procesada exitosamente.')
                        
                        const aiMessage = await generateHumanResponse('solicitud procesada exitosamente', userState.name!, `Solicitud: ${amount}`)
                        
                        await new Promise(resolve => setTimeout(resolve, 3000))
                        await flowDynamic(aiMessage)
                        await flowDynamic('üìû Un especialista te contactar√° en los pr√≥ximos 10 minutos.')
                        await flowDynamic('¬°Gracias por confiar en Banco Guayaquil! üéâ')
                        
                    } else {
                        await flowDynamic('‚ö†Ô∏è Hubo un inconveniente al procesar tu solicitud.')
                        await flowDynamic('Un asesor te contactar√° en breve para continuar manualmente.')
                        await flowDynamic('¬°No te preocupes, tu informaci√≥n est√° segura! üòä')
                    }
                    
                    userStates.delete(userId)
                } else {
                    const retryCount = (userState.retryCount || 0) + 1
                    
                    if (retryCount >= 3) {
                        await flowDynamic('Comprendo que definir el monto exacto puede ser complejo.')
                        await flowDynamic('¬øTe gustar√≠a que un asesor te llame para ayudarte a calcular el monto ideal para tu proyecto? üìû')
                        userStates.set(userId, { ...userState, step: 'waiting_human_contact' })
                    } else {
                        await flowDynamic(validation.message || 'No logr√© entender el monto que necesitas.')
                        if (retryCount === 1) {
                            await flowDynamic('Por ejemplo: "15000", "15,000", "quince mil d√≥lares", etc.')
                        }
                        userStates.set(userId, { ...userState, retryCount })
                    }
                }
                break
            }

            case 'waiting_human_contact': {
                if (userMessage.toLowerCase().includes('si') || userMessage.toLowerCase().includes('s√≠')) {
                    await flowDynamic('¬°Perfecto! Un asesor especializado te contactar√° en los pr√≥ximos 15 minutos.')
                    await flowDynamic('Mientras tanto, puedes preparar cualquier documento que tengas a mano.')
                    await flowDynamic('¬°Gracias por tu paciencia y confianza en Banco Guayaquil! üéâ')
                    userStates.delete(userId)
                } else {
                    await flowDynamic('Entiendo perfectamente. Cuando te sientas listo, estar√© aqu√≠ para ayudarte.')
                    await flowDynamic('¬øHay algo m√°s en lo que pueda asistirte hoy? üòä')
                    userStates.set(userId, { ...userState, step: 'waiting_interest' })
                }
                break
            }
                
            default: {
                const humanResponse = await generateHumanResponse('mensaje no entendido', userState.name!, userMessage)
                await flowDynamic(humanResponse)
                await flowDynamic('¬øTe gustar√≠a que te ayude con tu solicitud o tienes alguna pregunta espec√≠fica? üòä')
                userStates.set(userId, { ...userState, step: 'waiting_interest' })
                break
            }
        }
    })

const main = async () => {
    const adapterFlow = createFlow([mainFlow, conversationFlow])
    const adapterProvider = createProvider(Provider)

    const adapterDB = new Database({
        host: process.env.POSTGRES_DB_HOST,
        port: parseInt(process.env.POSTGRES_DB_PORT ?? '5432'),
        user: process.env.POSTGRES_DB_USER,
        password: process.env.POSTGRES_DB_PASSWORD,
        database: process.env.POSTGRES_DB_NAME
    })

    const { httpServer, handleCtx } = await createBot({
        flow: adapterFlow,
        provider: adapterProvider,
        database: adapterDB
    })

    // Endpoints HTTP
    adapterProvider.server.post('/send-message', handleCtx(async (bot, req, res) => {
        const { number, message } = req.body
        if (!number || !message) {
            res.writeHead(400, { 'Content-Type': 'application/json' })
            return res.end(JSON.stringify({ 
                status: 'error', 
                error: 'Faltan par√°metros: number y message son requeridos' 
            }))
        }
        try {
            await bot.sendMessage(number, message, {})
            res.writeHead(200, { 'Content-Type': 'application/json' })
            return res.end(JSON.stringify({ status: 'sent', number, message }))
        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : 'Unknown error'
            res.writeHead(500, { 'Content-Type': 'application/json' })
            return res.end(JSON.stringify({ status: 'error', error: errorMessage }))
        }
    }))

    adapterProvider.server.get('/health', handleCtx(async (bot, req, res) => {
        res.writeHead(200, { 'Content-Type': 'application/json' })
        return res.end(JSON.stringify({ 
            status: 'healthy', 
            service: 'BuilderBot con APIs Externas - Banco Guayaquil', 
            timestamp: new Date().toISOString(),
            activeConversations: userStates.size,
            features: ['Validaci√≥n IA', 'APIs Externas', 'Detecci√≥n emocional', 'Respuestas humanas'],
            external_api: EXTERNAL_API_URL
        }))
    }))
    
    httpServer(+PORT)
    console.log(`‚úÖ BuilderBot con APIs Externas iniciado en puerto ${PORT}`)
    console.log(`üß† Caracter√≠sticas activas:`)
    console.log(`   ‚úì Consulta informaci√≥n del cliente: GET ${EXTERNAL_API_URL}/client/:number`)
    console.log(`   ‚úì Consulta campa√±as activas: GET ${EXTERNAL_API_URL}/campanas/:number`)
    console.log(`   ‚úì Env√≠a leads aceptados: POST ${EXTERNAL_API_URL}/lead/:number`)
    console.log(`   ‚úì Detecci√≥n de intenciones con LangChain`)
    console.log(`   ‚úì Validaci√≥n inteligente de datos`)
    console.log(`   ‚úì Respuestas emp√°ticas y humanas`)
    console.log(`   ‚úì Manejo de emociones negativas`)
    console.log(`   ‚úì Reintentos inteligentes`)
}

main().catch(err => {
    const errorMessage = err instanceof Error ? err.message : 'Unknown error'
    console.error('‚ùå Error al iniciar:', errorMessage)
    process.exit(1)
})